/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Nightly Tester Tools.
 *
 * The Initial Developer of the Original Code is
 *      Dave Townsend <dave.townsend@blueprintit.co.uk>.
 *
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK *****
 *
 * $HeadURL:svn://svn.blueprintit.co.uk/dave/mozilla/firefox/buildid/trunk/components/ZipWriter/public/nttIZipWriter.idl $
 * $LastChangedBy:dave $
 * $Date:2007-03-04 23:58:14 +0000 (Sun, 04 Mar 2007) $
 * $Revision:975 $
 *
 */

#include "nsISupports.idl"
#include "nsIOutputStream.idl"
#include "nsIRequestObserver.idl"
#include "nsIFile.idl"
#include "nsIZipReader.idl"

/**
 * nttIZipWriter
 *
 * An interface for a zip archiver that can be used from script.
 *
 * The interface supports both a synchronous method of archiving data and a
 * queueing system to allow operations to be prepared then run in sequence
 * with notification after completion.
 *
 * Many operations (whether being performed synchronously or in the
 * background queue) mark the zip writer "busy". Only one of these can be
 * carried out at a time.
 */
[scriptable, uuid(98e40e77-2a94-46cc-bac0-deab758066be)]
interface nttIZipWriter : nsISupports
{
  /**
   * Gets or sets the comment associated with the open zip file.
   *
   * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened
   */
  attribute AString comment;
  
  /**
   * Indicates that the zip writer is in a "busy" state while operations
   * are being performed.
   */
  readonly attribute boolean busy;
  
  /**
   * Opens a zip file.
   *
   * @param file the zip file to open
   * @param ioflags the open flags for the zip file from prio.h
   *
   * @throws NS_ERROR_ALREADY_INITIALIZED if a zip file is already open
   * @throws NS_ERROR_INVALID_ARG if file is null
   * @throws NS_ERROR_FILE_NOT_FOUND if file does not exist and flags did
   *  not allow for creation
   * @throws <other-error> on failure to open zip file (most likely corrupt
   * or unsupported form)
   */
  void open(in nsIFile file, in PRInt32 ioflags);
  
  /**
   * Returns a nsIZipEntry describing a specified zip entry or null if there is
   * no such entry in the zip file
   */
  nsIZipEntry getEntry(in AString zipEntry);

  /**
   * Checks whether the zipfile contains an entry specified by zipEntry.
   */
  boolean hasEntry(in AString zipEntry);

  /**
   * Adds a new directory entry to the zip file. This operation completes
   * immediately.
   *
   * @param path the path of the directory entry
   * @param modtime the modification time of the directory
   *
   * @return the nsIZipEntry describing the stored directory.
   *
   * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened
   * @throws NS_ERROR_FAILURE if another operation is currently in progress
   */
  nsIZipEntry addDirectoryEntry(in AString path, in PRTime modtime);
  
  /**
   * Adds a new file entry to the zip file. This operation will not complete
   * until the returned nsIOutputStream is closed. The zip writer will be busy
   * until then.
   *
   * @param path the path of the file entry
   * @param modtime the modification time of the file
   *
   * @return an nsIOutputStream to write the file data to.
   *
   * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened
   * @throws NS_ERROR_FAILURE if another operation is currently in progress
   */
  nsIOutputStream addFileEntry(in AString path, in PRTime modtime);
  
  /**
   * Adds a new file or directory to the zip file. This operation will not
   * complete until the given file has been completely stored into the zip
   * file.
   *
   * @param path the path of the file entry
   * @param modtime the modification time of the file
   *
   * @return the nsIZipEntry describing the stored file.
   *
   * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened
   * @throws NS_ERROR_FAILURE if another operation is currently in progress
   * @throws NS_ERROR_FILE_NOT_FOUND if file does not exist
   */
  nsIZipEntry addFile(in AString path, in nsIFile file);
  
  /**
   * Removes an existing entry from the zip file. This operation can take
   * time to complete and will not return until it has completed. The zip
   * writer will be busy until then.
   *
   * @param path the path of the entry to be removed
   *
   * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened
   * @throws NS_ERROR_FAILURE if another operation is currently in progress
   * @throws NS_ERROR_FILE_NOT_FOUND if no entry with the given path exists
   * @throws <other-error> on failure to update the zip file
   */
  void removeEntry(in AString path);
  
  /**
   * Places a file for compression into the queue for processing at some
   * future time.
   *
   * @param path the path to give the entry
   * @param file the file to store, can be a file or directory
   *
   * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened
   * @throws NS_ERROR_FILE_NOT_FOUND if file does not exist
   */
  void queueFile(in AString path, in nsIFile file);
  
  /**
   * Places a removal into the queue for processing at some
   * future time.
   *
   * @param path the path entry to be removed
   *
   * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened
   */
  void queueRemoval(in AString path);
  
  /**
   * Processes all queued items until complete or some error occurs. The
   * observer will be notified when the first operation starts and when the
   * last operation completes. Any failures will be passed to the observer.
   * The zip writer will be busy until the queue is complete or some error
   * halted processing of the queue early. In the event of an early failure,
   * remaining items will stay in the queue and calling processQueue will
   * continue.
   *
   * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened
   * @throws NS_ERROR_FAILURE if another operation is currently in progress
   */
  void processQueue(in nsIRequestObserver observer, in nsISupports ctxt);
  
  /**
   * Closes the zip file.
   *
   * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened
   * @throws NS_ERROR_FAILURE if another operation is currently in progress
   * @throws <other-error> on failure to complete the zip file
   */
  void close();
};
